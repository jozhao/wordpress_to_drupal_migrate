<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_menu().
 */
function migrate_cleanup_menu() {
  $items['admin/config/development/migrate_cleanup'] = array(
    'title' => 'Migrate Cleanup',
    'description' => 'Clean up migration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_cleanup_form'),
    'file' => 'migrate_cleanup.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Clean up process.
 */
function _migrate_cleanup_process() {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $entity_ids = array_keys($result['node']);

    // Using Batch API for bulk processing.
    $batch = array(
      'title' => t('Migrate - Clean up'),
      'operations' => array(),
      'finished' => 'migrate_cleanup_rebuild_batch_finished',
      'init_message' => t('Initializing...'),
      'progress_message' => t('Processing @current out of @total instances.'),
      'error_message' => t('Processing encountered an error.'),
      'file' => drupal_get_path('module', 'migrate_cleanup') . '/migrate_cleanup.batch.inc',
    );

    foreach ($entity_ids as $id) {
      // We create a new process for each entity, as a means of keeping
      // the.
      // batch process more transparent.
      $batch['operations'][] = array(
        'migrate_cleanup_rebuild_batch_process_entity',
        array(
          $id,
        ),
      );
    }

    batch_set($batch);
    batch_process();
  }
  else {
    drupal_set_message(t('There are no existing contents.'), 'warning');

    return FALSE;
  }
}

/**
 * Resource token callback.
 */
function _migrate_cleanup_token_resource($attr, $extras = NULL, $tag) {
  $output = '[' . $tag;
  $ids = $attr['ids'];
  $ids_array = explode(',', $ids);

  if (!empty($ids)) {
    $trans = db_select('migrate_map_eexgovauenergyefficiencyexchangeeexresources', 'r')
      ->fields('r', ['sourceid1', 'destid1'])
      ->condition('sourceid1', $ids_array, 'IN')
      ->execute()
      ->fetchAllKeyed();

    if (!empty($trans)) {
      $ids = strtr($ids, $trans);
    }

    $output .= ' ids="' . $ids . '"';
  }

  $output .= ']';

  return $output;
}

/**
 * List of custom tokens.
 *
 * @return array
 */
function _migrate_cleanup_custom_tokens() {
  return array(
    'resource' => '_migrate_cleanup_token_resource',
  );
}

/**
 * Process custom tokens.
 *
 * @param $text
 * @return mixed
 */
function _migrate_cleanup_token_process($text) {
  // Load include file.
  module_load_include('inc', 'migrate_cleanup', 'includes/migrate_cleanup.wordpress');

  $tokens = _migrate_cleanup_custom_tokens();

  if (FALSE === strpos($text, '[')) {
    return $text;
  }

  // Find all registered tag names in $content.
  preg_match_all('@\[([^<>&/\[\]\x00-\x20=]++)@', $text, $matches);
  $tags = array_intersect(array_keys($tokens), $matches[1]);

  // Return if no tag found.
  if (empty($tags)) {
    return $text;
  }

  $pattern = get_shortcode_regex($tags);

  $text = preg_replace_callback("/$pattern/", '_migrate_cleanup_token_callback', $text);

  return $text;
}

/**
 * Process custom token callback.
 */
function _migrate_cleanup_token_callback($m) {
  // Load include file.
  module_load_include('inc', 'migrate_cleanup', 'includes/migrate_cleanup.wordpress');

  $tokens = _migrate_cleanup_custom_tokens();

  // allow [[foo]] syntax for escaping a tag
  if ($m[1] == '[' && $m[6] == ']') {
    return substr($m[0], 1, -1);
  }

  $tag = $m[2];
  $attr = shortcode_parse_atts($m[3]);

  if (!is_callable($tokens[$tag])) {
    return $m[0];
  }

  if (isset($m[5])) {
    // enclosing tag - extra parameter
    return $m[1] . call_user_func($tokens[$tag], $attr, $m[5], $tag) . $m[6];
  }
  else {
    // self-closing tag
    return $m[1] . call_user_func($tokens[$tag], $attr, NULL, $tag) . $m[6];
  }
}
